//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.10.102
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace CustomerPortalCMS.GeneratedModels
{
	/// <summary>Customer Data Item</summary>
	[PublishedContentModel("customerDataItem")]
	public partial class CustomerDataItem : PublishedContentModel, ICpDashboardPreferences
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "customerDataItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CustomerDataItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CustomerDataItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Address 1: The customer's address line 1. (aradd1)
		///</summary>
		[ImplementPropertyType("customerAddress1")]
		public string CustomerAddress1
		{
			get { return this.GetPropertyValue<string>("customerAddress1"); }
		}

		///<summary>
		/// Address 2: The customer's address line 2. (aradd2)
		///</summary>
		[ImplementPropertyType("customerAddress2")]
		public string CustomerAddress2
		{
			get { return this.GetPropertyValue<string>("customerAddress2"); }
		}

		///<summary>
		/// Admin User's Email Address: Email address of admin account.
		///</summary>
		[ImplementPropertyType("customerAdminUserEmail")]
		public string CustomerAdminUserEmail
		{
			get { return this.GetPropertyValue<string>("customerAdminUserEmail"); }
		}

		///<summary>
		/// City: City
		///</summary>
		[ImplementPropertyType("customerCity")]
		public string CustomerCity
		{
			get { return this.GetPropertyValue<string>("customerCity"); }
		}

		///<summary>
		/// Credit Location: The customer's credit location. (creditloc)
		///</summary>
		[ImplementPropertyType("customerCreditLocation")]
		public string CustomerCreditLocation
		{
			get { return this.GetPropertyValue<string>("customerCreditLocation"); }
		}

		///<summary>
		/// Market: Market name for this customer.
		///</summary>
		[ImplementPropertyType("customerMarket")]
		public string CustomerMarket
		{
			get { return this.GetPropertyValue<string>("customerMarket"); }
		}

		///<summary>
		/// Name: Customer/Account Name.  (arname)
		///</summary>
		[ImplementPropertyType("customerName")]
		public string CustomerName
		{
			get { return this.GetPropertyValue<string>("customerName"); }
		}

		///<summary>
		/// Number: The customer account number. (arnum2)
		///</summary>
		[ImplementPropertyType("customerNumber")]
		public string CustomerNumber
		{
			get { return this.GetPropertyValue<string>("customerNumber"); }
		}

		///<summary>
		/// Register By Invite Only: Set to true if new users have to be invited or manually created for this customer account.  (Registration page is locked.)
		///</summary>
		[ImplementPropertyType("customerRegistrationLocked")]
		public bool CustomerRegistrationLocked
		{
			get { return this.GetPropertyValue<bool>("customerRegistrationLocked"); }
		}

		///<summary>
		/// Registration Notification Email: If the customer wants to be notified when new users register under their account number, enter an email address here to be notified.  (Multiples accepted separated by commas.)
		///</summary>
		[ImplementPropertyType("customerRegistrationNotificationEmail")]
		public string CustomerRegistrationNotificationEmail
		{
			get { return this.GetPropertyValue<string>("customerRegistrationNotificationEmail"); }
		}

		///<summary>
		/// State: State
		///</summary>
		[ImplementPropertyType("customerState")]
		public string CustomerState
		{
			get { return this.GetPropertyValue<string>("customerState"); }
		}

		///<summary>
		/// Throttle Failure Counter: Internal counter for registration failures.
		///</summary>
		[ImplementPropertyType("customerThrottleFailureCounter")]
		public int CustomerThrottleFailureCounter
		{
			get { return this.GetPropertyValue<int>("customerThrottleFailureCounter"); }
		}

		///<summary>
		/// Throttle Locked Time: If the system detects a high number of failed registration attempts on this account this value is set and will prevent registrations for a certain amount of time.
		///</summary>
		[ImplementPropertyType("customerThrottleLockTime")]
		public DateTime CustomerThrottleLockTime
		{
			get { return this.GetPropertyValue<DateTime>("customerThrottleLockTime"); }
		}

		///<summary>
		/// Zipcode: Customer's zip code. (arzip)
		///</summary>
		[ImplementPropertyType("customerZipCode")]
		public string CustomerZipCode
		{
			get { return this.GetPropertyValue<string>("customerZipCode"); }
		}

		///<summary>
		/// Invoice Tab Visible?: Is the invoices tab visible?
		///</summary>
		[ImplementPropertyType("cpDashboardIsInvoiceTabVisible")]
		public bool CpDashboardIsInvoiceTabVisible
		{
			get { return CustomerPortalCMS.GeneratedModels.CpDashboardPreferences.GetCpDashboardIsInvoiceTabVisible(this); }
		}

		///<summary>
		/// Pick Tickets Tab Visible?: Is the Pick Ticket tab visible?
		///</summary>
		[ImplementPropertyType("cpDashboardIsPickTicketsTabVisible")]
		public bool CpDashboardIsPickTicketsTabVisible
		{
			get { return CustomerPortalCMS.GeneratedModels.CpDashboardPreferences.GetCpDashboardIsPickTicketsTabVisible(this); }
		}

		///<summary>
		/// Quotes Tab Visible?: Is the Quotes tab visible?
		///</summary>
		[ImplementPropertyType("cpDashboardIsQuotesTabVisible")]
		public bool CpDashboardIsQuotesTabVisible
		{
			get { return CustomerPortalCMS.GeneratedModels.CpDashboardPreferences.GetCpDashboardIsQuotesTabVisible(this); }
		}

		///<summary>
		/// Sales Order Tab Visible?: Is the Sales Order tab visible?
		///</summary>
		[ImplementPropertyType("cpDashboardIsSalesOrderTabVisible")]
		public bool CpDashboardIsSalesOrderTabVisible
		{
			get { return CustomerPortalCMS.GeneratedModels.CpDashboardPreferences.GetCpDashboardIsSalesOrderTabVisible(this); }
		}

		///<summary>
		/// Statement Tab Visible?: Is the Statement tab visible?
		///</summary>
		[ImplementPropertyType("cpDashboardIsStatementTabVisible")]
		public bool CpDashboardIsStatementTabVisible
		{
			get { return CustomerPortalCMS.GeneratedModels.CpDashboardPreferences.GetCpDashboardIsStatementTabVisible(this); }
		}
	}
}
